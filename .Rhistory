#take whitespace out of the child's name
child_first_name = trimws(gsub("([A-Z](\\.)?)+$", "", child_first_name)),
redcap_event_name = "initial_contact_arm_1",
date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d"),
date_record_updated = ymd(date_record_updated),
#dob_participant_info = format(dob_participant_info, "%Y-%m-%d"),
dob_participant_info = ymd(dob_participant_info),
#creates a 'raw first name and last name'
raw_first_name = tolower(
stri_trans_general(child_first_name,"Latin-ASCII")
),
raw_last_name = tolower(stri_trans_general(child_last_name,"Latin-ASCII"))
) %>%
#recode variable indicating research consent
mutate_at(
vars("research_consent", "video_consent"),
funs(ifelse(tolower(.) == "x", 1, 0))
) %>%
#not really sure what this gsub is doing tbh
mutate_at(
vars("child_first_name", "child_middle_initial", "child_last_name"),
funs(gsub('"', "'", .))
) %>%
#recode ethnicity column
mutate(
child_ethnicity = tolower(child_ethnicity),
ethnic_code___a = ifelse(grepl("\\ba\\b", child_ethnicity), 1, 0),
ethnic_code___ac =
ifelse((grepl("\\ba\\b", child_ethnicity) & grepl("\\bc\\b", child_ethnicity))
| grepl("(\\bac\\b)|(\\bca\\b)", child_ethnicity), 1, 0),
ethnic_code___af = ifelse(grepl("\\baf\\b", child_ethnicity), 1, 0),
ethnic_code___c = ifelse(grepl("\\bc\\b", child_ethnicity), 1, 0),
ethnic_code___cj = ifelse(grepl("\\bcj\\b", child_ethnicity), 1, 0),
ethnic_code___f = ifelse(grepl("\\bf\\b", child_ethnicity), 1, 0),
ethnic_code___h = ifelse(grepl("\\bh\\b", child_ethnicity), 1, 0),
ethnic_code___hc = ifelse(grepl("\\bhc\\b", child_ethnicity), 1, 0),
ethnic_code___i = ifelse(grepl("\\bi\\b", child_ethnicity), 1, 0),
ethnic_code___me = ifelse(grepl("\\bme\\b", child_ethnicity), 1, 0),
ethnic_code___na = ifelse(grepl("\\bna\\b", child_ethnicity), 1, 0),
ethnic_code___mej = ifelse(grepl("\\bmej\\b", child_ethnicity), 1, 0),
ethnic_code___pi = ifelse(grepl("\\bpi\\b", child_ethnicity), 1, 0),
clinical_population = ifelse(grepl("\\bsn\\b", child_ethnicity), 1, 0)
) %>%
left_join(
old_db_ids,
by = c("child_first_name", "child_last_name", "dob_participant_info")
) %>%
mutate(
schedule = f_options$schedule_options[current_schedule],
classroom = f_options$classroom_options[current_classroom],
participation_status = 1,
record_completed_by = f_options$entry_options[entered_by],
bing_participant_information_complete = 2
)
typeof(class_list %>% select(date_record_updated.x))
class(class_list %>% select(date_record_updated.x))
summary(class_list)
old_db_ids <-
read_csv(old_redcap_loc) %>%
select(-starts_with("redcap"))
old_db_ids <-
read_csv(old_redcap_loc) %>%
select(-starts_with("redcap")) %>%
rename_at(
vars("schedule", "classroom", "participation_status"),
funs(paste0("old_", .))
) %>%
mutate_at(
vars("child_first_name", "child_middle_initial", "child_last_name"),
funs(gsub('"', "'", .))
) %>%
mutate(
dob_participant_info = mdy(dob_participant_info),
#this  trims any spaces before the first name
child_first_name = trimws(gsub("([A-Z](\\.)?)+$", "", child_first_name)),
child_last_name = trimws(gsub("([A-Z](\\.)?)+$", "", child_last_name)),
#specifies that the record-update date is today in  y/m/d format
date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d"),
date_record_updated = ymd(date_record_updated),
#formats the date of birth is y/m/d
#these two make sure that first and last names have uniform upper/lower case!
#prevents lack of matching due to these reasons
raw_first_name = tolower(stri_trans_general(child_first_name,"Latin-ASCII")),
raw_last_name = tolower(stri_trans_general(child_last_name,"Latin-ASCII"))
)
raw_class_list <- read_excel(filename) %>%
rename(child_ethnicity = Ethnicity) #rename ethnicity column
#rename column names
new_colnames <- c(
"AY to Childs::ChldFname" = "child_first_name",
"AY to Childs::ChldLname" = "child_last_name",
"AY to Childs::BirthDate" = "dob_participant_info",
"AY to Childs::Sex" = "child_gender",
"AY to Childs::Rsrch" = "research_consent",
"AY to Childs::Photo" = "video_consent",
"child_ethnicity" = "child_ethnicity"
)
#string manipulation to extract the schedule of the current class list
current_schedule <-
str_extract(
filename,
paste(names(f_options$schedule_options), collapse = "|")
)
#string manipulation to extract the classroom of the current class list
current_classroom <-
str_extract(
filename,
paste(names(f_options$classroom_options), collapse = "|")
)
#I am commenting out all of this 'assert that' stuff because Danielle put it in and I have no idea what it does
# assert_that(current_schedule %in% names(f_options$schedule_options),
#             msg = "Not a valid schedule entry. Check out `names(f_options$schedule_options)` for valid options")
# assert_that(current_classroom %in% names(f_options$classroom_options),
#             msg = "Not a valid classroom entry. Check out `names(f_options$classroom_options)` for valid options")
# assert_that(f_options$entered_by %in% names(f_options$entry_options),
#             msg = "Not a valid admin name entry. Check out `names(f_options$entry_options)` for valid options")
class_list <-
raw_class_list %>%
#rename columns
rename_at(vars(names(new_colnames)), funs(new_colnames[.])) %>%
#recode child genders to 0 and 1
mutate(child_gender = case_when(
toupper(child_gender) == "M" ~ 0,
toupper(child_gender) == "F" ~ 1,
TRUE ~ 2
)) %>%
select(unname(new_colnames)) %>%
#regular expression manipulation to get out the child's middle name
mutate(
child_middle_initial = str_extract(
child_first_name,
"([A-Z](\\.)?(\\s)?)+$"
),
#take whitespace out of the child's name
child_first_name = trimws(gsub("([A-Z](\\.)?)+$", "", child_first_name)),
child_last_name = trimws(gsub("([A-Z](\\.)?)+$", "", child_last_name)),
redcap_event_name = "initial_contact_arm_1",
date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d"),
date_record_updated = ymd(date_record_updated),
#dob_participant_info = format(dob_participant_info, "%Y-%m-%d"),
dob_participant_info = ymd(dob_participant_info),
#creates a 'raw first name and last name'
raw_first_name = tolower(
stri_trans_general(child_first_name,"Latin-ASCII")
),
raw_last_name = tolower(stri_trans_general(child_last_name,"Latin-ASCII"))
) %>%
#recode variable indicating research consent
mutate_at(
vars("research_consent", "video_consent"),
funs(ifelse(tolower(.) == "x", 1, 0))
) %>%
#not really sure what this gsub is doing tbh
mutate_at(
vars("child_first_name", "child_middle_initial", "child_last_name"),
funs(gsub('"', "'", .))
) %>%
#recode ethnicity column
mutate(
child_ethnicity = tolower(child_ethnicity),
ethnic_code___a = ifelse(grepl("\\ba\\b", child_ethnicity), 1, 0),
ethnic_code___ac =
ifelse((grepl("\\ba\\b", child_ethnicity) & grepl("\\bc\\b", child_ethnicity))
| grepl("(\\bac\\b)|(\\bca\\b)", child_ethnicity), 1, 0),
ethnic_code___af = ifelse(grepl("\\baf\\b", child_ethnicity), 1, 0),
ethnic_code___c = ifelse(grepl("\\bc\\b", child_ethnicity), 1, 0),
ethnic_code___cj = ifelse(grepl("\\bcj\\b", child_ethnicity), 1, 0),
ethnic_code___f = ifelse(grepl("\\bf\\b", child_ethnicity), 1, 0),
ethnic_code___h = ifelse(grepl("\\bh\\b", child_ethnicity), 1, 0),
ethnic_code___hc = ifelse(grepl("\\bhc\\b", child_ethnicity), 1, 0),
ethnic_code___i = ifelse(grepl("\\bi\\b", child_ethnicity), 1, 0),
ethnic_code___me = ifelse(grepl("\\bme\\b", child_ethnicity), 1, 0),
ethnic_code___na = ifelse(grepl("\\bna\\b", child_ethnicity), 1, 0),
ethnic_code___mej = ifelse(grepl("\\bmej\\b", child_ethnicity), 1, 0),
ethnic_code___pi = ifelse(grepl("\\bpi\\b", child_ethnicity), 1, 0),
clinical_population = ifelse(grepl("\\bsn\\b", child_ethnicity), 1, 0)
)
View(class_list)
format_class_list <-
function(filename, old_db_ids, f_options) {
#initialize raw class list for all excel files
raw_class_list <- read_excel(filename) %>%
rename(child_ethnicity = Ethnicity) #rename ethnicity column
#rename column names
new_colnames <- c(
"AY to Childs::ChldFname" = "child_first_name",
"AY to Childs::ChldLname" = "child_last_name",
"AY to Childs::BirthDate" = "dob_participant_info",
"AY to Childs::Sex" = "child_gender",
"AY to Childs::Rsrch" = "research_consent",
"AY to Childs::Photo" = "video_consent",
"child_ethnicity" = "child_ethnicity"
)
#string manipulation to extract the schedule of the current class list
current_schedule <-
str_extract(
filename,
paste(names(f_options$schedule_options), collapse = "|")
)
#string manipulation to extract the classroom of the current class list
current_classroom <-
str_extract(
filename,
paste(names(f_options$classroom_options), collapse = "|")
)
#I am commenting out all of this 'assert that' stuff because Danielle put it in and I have no idea what it does
# assert_that(current_schedule %in% names(f_options$schedule_options),
#             msg = "Not a valid schedule entry. Check out `names(f_options$schedule_options)` for valid options")
# assert_that(current_classroom %in% names(f_options$classroom_options),
#             msg = "Not a valid classroom entry. Check out `names(f_options$classroom_options)` for valid options")
# assert_that(f_options$entered_by %in% names(f_options$entry_options),
#             msg = "Not a valid admin name entry. Check out `names(f_options$entry_options)` for valid options")
class_list <-
raw_class_list %>%
#rename columns
rename_at(vars(names(new_colnames)), funs(new_colnames[.])) %>%
#recode child genders to 0 and 1
mutate(child_gender = case_when(
toupper(child_gender) == "M" ~ 0,
toupper(child_gender) == "F" ~ 1,
TRUE ~ 2
)) %>%
select(unname(new_colnames)) %>%
#regular expression manipulation to get out the child's middle name
mutate(
child_middle_initial = str_extract(
child_first_name,
"([A-Z](\\.)?(\\s)?)+$"
),
#take whitespace out of the child's name
child_first_name = trimws(gsub("([A-Z](\\.)?)+$", "", child_first_name)),
child_last_name = trimws(gsub("([A-Z](\\.)?)+$", "", child_last_name)),
redcap_event_name = "initial_contact_arm_1",
date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d"),
date_record_updated = ymd(date_record_updated),
#dob_participant_info = format(dob_participant_info, "%Y-%m-%d"),
dob_participant_info = ymd(dob_participant_info),
#creates a 'raw first name and last name'
raw_first_name = tolower(
stri_trans_general(child_first_name,"Latin-ASCII")
),
raw_last_name = tolower(stri_trans_general(child_last_name,"Latin-ASCII"))
) %>%
#recode variable indicating research consent
mutate_at(
vars("research_consent", "video_consent"),
funs(ifelse(tolower(.) == "x", 1, 0))
) %>%
#not really sure what this gsub is doing tbh
mutate_at(
vars("child_first_name", "child_middle_initial", "child_last_name"),
funs(gsub('"', "'", .))
) %>%
#recode ethnicity column
mutate(
child_ethnicity = tolower(child_ethnicity),
ethnic_code___a = ifelse(grepl("\\ba\\b", child_ethnicity), 1, 0),
ethnic_code___ac =
ifelse((grepl("\\ba\\b", child_ethnicity) & grepl("\\bc\\b", child_ethnicity))
| grepl("(\\bac\\b)|(\\bca\\b)", child_ethnicity), 1, 0),
ethnic_code___af = ifelse(grepl("\\baf\\b", child_ethnicity), 1, 0),
ethnic_code___c = ifelse(grepl("\\bc\\b", child_ethnicity), 1, 0),
ethnic_code___cj = ifelse(grepl("\\bcj\\b", child_ethnicity), 1, 0),
ethnic_code___f = ifelse(grepl("\\bf\\b", child_ethnicity), 1, 0),
ethnic_code___h = ifelse(grepl("\\bh\\b", child_ethnicity), 1, 0),
ethnic_code___hc = ifelse(grepl("\\bhc\\b", child_ethnicity), 1, 0),
ethnic_code___i = ifelse(grepl("\\bi\\b", child_ethnicity), 1, 0),
ethnic_code___me = ifelse(grepl("\\bme\\b", child_ethnicity), 1, 0),
ethnic_code___na = ifelse(grepl("\\bna\\b", child_ethnicity), 1, 0),
ethnic_code___mej = ifelse(grepl("\\bmej\\b", child_ethnicity), 1, 0),
ethnic_code___pi = ifelse(grepl("\\bpi\\b", child_ethnicity), 1, 0),
clinical_population = ifelse(grepl("\\bsn\\b", child_ethnicity), 1, 0)
) %>%
left_join(
old_db_ids,
by = c("child_first_name", "child_last_name", "dob_participant_info")
) %>%
mutate(
schedule = f_options$schedule_options[current_schedule],
classroom = f_options$classroom_options[current_classroom],
participation_status = 1,
record_completed_by = f_options$entry_options[entered_by],
bing_participant_information_complete = 2
)
return(class_list)
}
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options))
View(b)
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id)
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id) %>%
#if a child is in both the MWF class and the TTh class, change their schedule to
#5 days a week
mutate(schedule = ifelse(all(unique(schedule) == c(1,2)), 3, schedule)) %>%
#now get rid of the duplicate entries for children in this situation
filter(row_number() == 1)
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id) %>%
#if a child is in both the MWF class and the TTh class, change their schedule to
#5 days a week
mutate(schedule = ifelse(all(unique(schedule) == c(1,2)), 3, schedule)) %>%
#now get rid of the duplicate entries for children in this situation
filter(row_number() == 1) %>%
#mark if the thing has changed
mutate(CHANGED = case_when(
old_schedule != schedule ~ 1,
old_classroom != classroom ~ 1,
is.na(bing_id) ~ 1,
participation_status != old_participation_status ~ 1,
TRUE ~ 0
)) %>%
ungroup()
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id) %>%
#if a child is in both the MWF class and the TTh class, change their schedule to
#5 days a week
mutate(schedule = ifelse(all(unique(schedule) == c(1,2)), 3, schedule)) %>%
#now get rid of the duplicate entries for children in this situation
filter(row_number() == 1) %>%
#mark if the thing has changed
mutate(CHANGED = case_when(
old_schedule != schedule ~ 1,
old_classroom != classroom ~ 1,
is.na(bing_id) ~ 1,
participation_status != old_participation_status ~ 1,
TRUE ~ 0
)) %>%
ungroup() %>%
add_row(bing_id = old_db_ids$bing_id[!old_db_ids$bing_id %in% .$bing_id],
CHANGED = 1, participation_status = 0,
date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d"))
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id) %>%
#if a child is in both the MWF class and the TTh class, change their schedule to
#5 days a week
mutate(schedule = ifelse(all(unique(schedule) == c(1,2)), 3, schedule)) %>%
#now get rid of the duplicate entries for children in this situation
filter(row_number() == 1) %>%
#mark if the thing has changed
mutate(CHANGED = case_when(
old_schedule != schedule ~ 1,
old_classroom != classroom ~ 1,
is.na(bing_id) ~ 1,
participation_status != old_participation_status ~ 1,
TRUE ~ 0
)) %>%
ungroup() %>%
add_row(bing_id = old_db_ids$bing_id[!old_db_ids$bing_id %in% .$bing_id],
CHANGED = 1, participation_status = 0,
date_record_updated = ymd(format(today("America/Los_Angeles"), "%Y-%m-%d")))
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id) %>%
#if a child is in both the MWF class and the TTh class, change their schedule to
#5 days a week
mutate(schedule = ifelse(all(unique(schedule) == c(1,2)), 3, schedule)) %>%
#now get rid of the duplicate entries for children in this situation
filter(row_number() == 1) %>%
#mark if the thing has changed
mutate(CHANGED = case_when(
old_schedule != schedule ~ 1,
old_classroom != classroom ~ 1,
is.na(bing_id) ~ 1,
participation_status != old_participation_status ~ 1,
TRUE ~ 0
)) %>%
ungroup() %>%
add_row(bing_id = old_db_ids$bing_id[!old_db_ids$bing_id %in% .$bing_id],
CHANGED = 1, participation_status = 0,
# date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d")
)
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id) %>%
#if a child is in both the MWF class and the TTh class, change their schedule to
#5 days a week
mutate(schedule = ifelse(all(unique(schedule) == c(1,2)), 3, schedule)) %>%
#now get rid of the duplicate entries for children in this situation
filter(row_number() == 1) %>%
#mark if the thing has changed
mutate(CHANGED = case_when(
old_schedule != schedule ~ 1,
old_classroom != classroom ~ 1,
is.na(bing_id) ~ 1,
participation_status != old_participation_status ~ 1,
TRUE ~ 0
)) %>%
ungroup() %>%
add_row(bing_id = old_db_ids$bing_id[!old_db_ids$bing_id %in% .$bing_id],
CHANGED = 1, participation_status = 0,
# date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d")
) %>%
#filter(CHANGED == 1) %>%
mutate(date_record_created = ifelse(is.na(bing_id), format(today("America/Los_Angeles"), "%Y-%m-%d"), NA),
redcap_event_name = "initial_contact_arm_1") %>%
rename_at(vars(contains(".x")), funs(gsub("\\.x$", "", .))) %>%
select(one_of(redcap_columns)) %>%
arrange(bing_id)
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options))
b <-
class_lists_loc %>%
map_df(function(x) format_class_list(x, old_db_ids, f_options)) %>%
#not really sure what is going on here with the ethnic code...
mutate(
ethnic_code___98 =
ifelse(rowSums(.[grep("ethnic_code___[a-z]+", names(.))], na.rm = TRUE) ==
0, 1, 0)
) %>%
group_by(child_first_name, child_last_name) %>%
arrange(bing_id) %>%
#if a child is in both the MWF class and the TTh class, change their schedule to
#5 days a week
mutate(schedule = ifelse(all(unique(schedule) == c(1,2)), 3, schedule)) %>%
#now get rid of the duplicate entries for children in this situation
filter(row_number() == 1) %>%
#mark if the thing has changed
mutate(CHANGED = case_when(
old_schedule != schedule ~ 1,
old_classroom != classroom ~ 1,
is.na(bing_id) ~ 1,
participation_status != old_participation_status ~ 1,
TRUE ~ 0
)) %>%
ungroup() %>%
add_row(bing_id = old_db_ids$bing_id[!old_db_ids$bing_id %in% .$bing_id],
CHANGED = 1, participation_status = 0,
# date_record_updated = format(today("America/Los_Angeles"), "%Y-%m-%d")
) %>%
#filter(CHANGED == 1) %>%
mutate(date_record_created = ifelse(is.na(bing_id), format(today("America/Los_Angeles"), "%Y-%m-%d"), NA),
redcap_event_name = "initial_contact_arm_1") %>%
rename_at(vars(contains(".x")), funs(gsub("\\.x$", "", .))) %>%
select(one_of(redcap_columns)) %>%
arrange(bing_id)
write_csv(b, output_loc, na = "")
here::here()
knitr::opts_chunk$set(echo = TRUE)
library(lmerTest)
library(ggthemes)
library(psych)
library(magrittr)
library(langcog)
library(tidyboot)
library(fs)
library(tidyverse)
source(path(here::here(), "file_paths.R"))
